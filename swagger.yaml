swagger: '2.0'
info:
  title: Bank Argent API documentation
  description: Contains all available API endpoints in this codebase
  version: '1.0.0'
  termsOfService: 'http://swagger.io/terms/'
host: localhost:3001
basePath: /api/v1
schemes:
  - http
paths:
  /user/login:
    post:
      tags:
        - User Module
      summary: Login
      description: API for Login
      parameters:
        - in: body
          name: body
          description: Login Payload
          required: true
          schema:
            $ref: '#/definitions/Login'
      produces:
        - application/json
      responses:
        '200':
          description: Login Successfully
          schema:
            $ref: '#/definitions/LoginResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/signup:
    post:
      tags:
        - User Module
      summary: Signup
      description: API for Signup
      parameters:
        - in: body
          name: body
          description: Signup Payload
          required: true
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        '200':
          description: Signup Successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/profile:
    post:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for fetching a user profile
      #produces:
       # - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
    put:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for updating a user profile
      parameters:
        - in: body
          name: body
          description: Update user profile attributes
          required: true
          schema:
            $ref: '#/definitions/UserProfile'
      produces:
        - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
#! Transaction module
  /user/transactions:
    get:
      security:
        - Bearer: []
      tags: 
        - Transactions modules
      summary: Get monthly transactions
      description: Retrieve transactions for the month
      produces:
        - application/json
      responses:
        '200': 
          description: Success. Returns the list of transactions for the month
          schema: 
            $ref: '#/definitions/TransactionResponse'
        '400':
          description: Invalid request
        '500': 
          description: Internal Server Error
  #! Récupération d'une transaction spécifique
  /user/transactions/{transactionId}:
    get:
      security:
        - Bearer: []
      tags:
        - Transactions Module
      summary: Get specific transaction details
      description: Retrieve a specific transaction detail
      parameters:
        - in: path
          name: transactionId
          description: Unique ID of transaction 
          required: true
          type: string
      responses:
        '200':
          description: Sucess. Retrieve specific detail transaction
          schema:
            $ref: '#/definitions/TransactionApiResponse'
        '400':
          description: Invalid request
        '500':
          description: Internal Server Error
#! Ajout d'une catégorie ou d'une note à la transaction
  /user/transactions/{transactionId}/{item}:
    post:
      security:
        - Bearer: []
      tags:
        - Transactions Module
      summary: add category or note to a transaction
      description: add category or note to a transaction
      parameters:
        - in: path
          name: transactionId
          description: Unique ID 
          required: true
          type: string
        - in: path
          name: item
          description: Category or note
          required: true
          type: string
        - in: body
          name: body
          description: new category or information for the transaction
          required: true
          schema:
            $ref: '#/definitions/TransactionCategory'  
      responses:
        '200':
          description: Sucess. the category or note are added.
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid request
        '500':
          description: Internal Server Error
#! Supprimer une note d'une transaction
  /user/transactions/{transactionId}/notes/{noteId}:
    delete:
      security:
        - Bearer: []
      tags:
        - Transactions Module
      summary: 
        Delete a transaction's note
      parameters:
        - in: path
          name: transactionId
          description: Unique Id of the transaction
          required: true
          type: string
          name: noteId
          description: unique noteId to be deleted
          required: true
      responses:
        '200':
          description: Success. Note is deleted
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Request
        '500':
          description: Internal Server Error
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  User:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
      firstName:
        type: string
        description: user first name
      lastName:
        type: string
        description: user last name
      userName:
        type: string
        description: user public name
  Login:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
  ApiResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        type: object
        properties:
          id:
            type: string
          email:
            type: string
  LoginResponse:
    type: object
    properties:
      token:
        type: string
  UserProfile:
    type: object
    properties:
      userName:
        type: string
#! Definition de la réponse pour liste des transactions
  TransactionsResponse:
    type: object
    properties:
      transactions:
        type: array
        items:
          $ref: '#/definitions/TransactionApiResponse'
#! Reponse de l'Api pour la transaction individuelle
  TransactionsApiResponse:
    type: object
    properties:
      transactionId:
        type: string
      date:
        type: string
        format: date
        description: Transaction's date
      description:
        type: string
        description: Transaction's description
      amount:
        type: number
        decription: Transaction's amount
      type:
        type: string
        description: Transaction's type
      category: 
        type: string
        description: Transaction's category
      note:
        type: string
        description: Note associated with the transaction
#! Structure des catégories et des notes d'une transaction
  TransactionCategory:
    type: object
    properties: 
      category: 
        type: string
      note:
        type: string
#! Réponse de l'Api pour une catégorie
  CategoryApiResponse:
    type: object
    properties:
      status: 
        type: integer
      message:
        type: string
#! Réponse de l'Api pour une note
  NoteApiResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string



